# Tutorial on how to manage Topopt Petsc (Niels Aage, Erik Andreassen, Boyan Stefanov Lazarov) and 
# to benchmark 3D topology optimization problems.

First and foremost, Topopt petsc consist of five C++ classes and a short main program that i will detail below.
# Class structure
1. TopOpt class : 
Contains informationon the optimization problem, gridsize, parameters and general settings.
2. LinearElasticity class : 
The physics class which solves the linear elasticity problem on a structured 3D grid using 8-node linear brick elements. 
It also contains methods necessary for the minimum compliance problem, ie objective, constraint and sensitivity calculations.
3. Filter/PDEFilter class :
are filter classes which contains both sensitivity (Sigmund 1997), density (Bruns and Tortorelli 2001; Bourdin 2001),
and PDE (Lazarov and Sigmund 2011) filters through a common interface.
4. MMA class :
containing a fully parallelized implementation of the Method of Moving Asymptotes (MMA) (Svanberg 1987), 
following the description given in Aage and Lazarov (2013).
5. MPIIO class :
A versatile output class capable of dumping arbitrary field data into a single binary file. 
# And finally :
The distribution also includes Python scripts that conveniently converts the binary outputdata to the VTU format 
(Schroeder and Martin 2003) that can be visualized in e.g. ParaView version 4 or newer (Ahrens et al. 2005).
That means one can visualize the optimize design via Paraview.

# How to compile and run the code Topopt petsc on the terminal.
First and foremost, you will need a makefile script to run it on the terminal. Don't worry, we already have one. 
One can vizualize the makefile by going to .....
# how to use makefile!
One should first type on terminal : cd topopt/ to be place in the Topopt petsc files and the type : make or make ./topopt 
to to compile the code. To run the code on two processors using the default settings, one  should type :  mpiexec -np 2 ./topopt 

# Default settings :
The default problem is the minimum compliance cantilever problem as described in Aage and Lazarov (2013) on a 2x1x1 domain,
using sensitivity filter with radius 0.08 and a volume fraction of 0.12 percent. 
The contrast between solid and void is set to 1e+9, the test convergence is set to ||x_k -x_{k+1}|| L.T 0.01 
or  a maximum of 400 design cycles.

# How do you change a problem, ie cantilever to wheel or wheel to michell?.
One should go the source file, LinearElasticity.cc (LinearElasticity class) and inside the function : SetUpLoadAndBC(*),
and to the meat code : // Set the values
To change default problem to a 3D wheel problem, one shoud go to .....
We do have 3D wheel problem, 3D michell problem, 3D cantilever (by default). 
And of course, one can also build his own new problem by changing //Set the values accordingly to obtain a new problem,
ie 3D MBB.

# How do you change domain's size ?.
One should go the source file, TopOpt.cc (TopOpt class) and inside the function : SetUp(*), 
and to the meat code : // SET DEFAULTS for FE mesh and levels for MG solver
For example : xc[0] = xmin, xc[1]=xmax, xc[2]=ymin, xc[3]=ymax, xc[4]=zmin, xc[5]=zmax, 
so if you want 4x1x1 domain, one should change xc[0] = 0, xc[1]=4, xc[2]=0, xc[3]=1, xc[4]=0, xc[5]=1

# How do you change filter's size and volume fraction?!
One could repeat the same action done to change domain's size but instead modify the meat code :// SET DEFAULTS for optimization problems 

# How to benchmark 3D topopogy optimization problems on HPC.
To benchmark 3D topopogy optimization problems, one should know how to change problems settings :
1. One should know how to change problem.
2. one should know how to change domain's size, filter's size and volume fraction.
3. One should know how to change solver. 
4. And one should know how to build up post-treatment or processing on matlab using performances profiles and data profiles.

We detail below one by one, how to achieve this goal.







